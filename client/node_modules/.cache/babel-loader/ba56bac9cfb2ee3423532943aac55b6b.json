{"ast":null,"code":"const {\n  default: axios\n} = require('axios');\n\nconst baseURL = 'http://localhost:4000';\nmodule.exports = {\n  loginReq: form => {\n    const reqBody = {};\n\n    for (const input of form) {\n      const val = input.value;\n\n      if (val !== '') {\n        reqBody[input.name] = val;\n      }\n    } //frontend validation needed:\n    // [] make sure all feilds are present,\n\n\n    if (Object.keys(reqBody).length !== 2) {\n      return alert('You forgot to fill something out');\n    } // [] lengths of inputs (match schema)\n\n\n    const loginURL = `${baseURL}/user/login`;\n    fetch(loginURL, {\n      method: \"PUT\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(reqBody)\n    }).then(rs => {\n      console.log(rs);\n      return rs.json();\n    }).then(res => {\n      console.log(res);\n    }); // axios.put(loginURL, reqBody)\n    // .then( res => {\n    //   console.log(res);\n    // })\n    // .catch( err => {\n    //   if (err) {\n    //     console.log(err);\n    //   }\n    // })\n  },\n  regReq: form => {\n    const reqBody = {};\n\n    for (const input of form) {\n      const val = input.value.trim();\n\n      if (val !== '') {\n        reqBody[input.name] = val;\n      }\n    } //frontend validation needed:\n    // [*] make sure all feilds are present,\n\n\n    if (Object.keys(reqBody).length !== 4) {\n      return alert('You forgot to fill something out');\n    } // [] lengths of inputs (match schema)\n    //all validation from before, \n    // [*] plus make sure both password inputs match\n\n\n    if (reqBody.password !== reqBody.password2) {\n      return alert('Passwords do not match');\n    }\n\n    const regURL = `${baseURL}/user/register`;\n    axios.post(regURL, reqBody).then(res => {\n      console.log(res);\n    }).catch(err => {\n      if (err) {\n        console.log(err);\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/georginasarpong/careerDevs/JsFullStack/UserSystemMERNStack/client/src/utils/userRequests.js"],"names":["default","axios","require","baseURL","module","exports","loginReq","form","reqBody","input","val","value","name","Object","keys","length","alert","loginURL","fetch","method","mode","headers","body","JSON","stringify","then","rs","console","log","json","res","regReq","trim","password","password2","regURL","post","catch","err"],"mappings":"AAAA,MAAM;AAACA,EAAAA,OAAO,EAAEC;AAAV,IAAmBC,OAAO,CAAC,OAAD,CAAhC;;AACA,MAAMC,OAAO,GAAG,uBAAhB;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,QAAQ,EAAGC,IAAD,IAAU;AAElB,UAAMC,OAAO,GAAG,EAAhB;;AAEA,SAAK,MAAMC,KAAX,IAAoBF,IAApB,EAA0B;AAExB,YAAMG,GAAG,GAAGD,KAAK,CAACE,KAAlB;;AAEA,UAAID,GAAG,KAAK,EAAZ,EAAgB;AACdF,QAAAA,OAAO,CAACC,KAAK,CAACG,IAAP,CAAP,GAAsBF,GAAtB;AACD;AAEF,KAZiB,CAclB;AACA;;;AACA,QAAIG,MAAM,CAACC,IAAP,CAAYN,OAAZ,EAAqBO,MAArB,KAAgC,CAApC,EAAuC;AACrC,aAAOC,KAAK,CAAC,kCAAD,CAAZ;AACD,KAlBiB,CAmBlB;;;AAEA,UAAMC,QAAQ,GAAI,GAAEd,OAAQ,aAA5B;AAEAe,IAAAA,KAAK,CAACD,QAAD,EAAW;AACZE,MAAAA,MAAM,EAAE,KADI;AAEZC,MAAAA,IAAI,EAAE,MAFM;AAGZC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAHG;AAMZC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAehB,OAAf;AANM,KAAX,CAAL,CAQCiB,IARD,CAQMC,EAAE,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,aAAOA,EAAE,CAACG,IAAH,EAAP;AACD,KAXD,EAYCJ,IAZD,CAYMK,GAAG,IAAI;AACXH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,KAdD,EAvBkB,CAuClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,GAlDc;AAoDfC,EAAAA,MAAM,EAAGxB,IAAD,IAAU;AAEhB,UAAMC,OAAO,GAAG,EAAhB;;AAEA,SAAK,MAAMC,KAAX,IAAoBF,IAApB,EAA0B;AAExB,YAAMG,GAAG,GAAGD,KAAK,CAACE,KAAN,CAAYqB,IAAZ,EAAZ;;AAEA,UAAItB,GAAG,KAAK,EAAZ,EAAgB;AACdF,QAAAA,OAAO,CAACC,KAAK,CAACG,IAAP,CAAP,GAAsBF,GAAtB;AACD;AAEF,KAZe,CAchB;AACA;;;AACA,QAAIG,MAAM,CAACC,IAAP,CAAYN,OAAZ,EAAqBO,MAArB,KAAgC,CAApC,EAAuC;AACrC,aAAOC,KAAK,CAAC,kCAAD,CAAZ;AACD,KAlBe,CAmBhB;AACA;AACA;;;AACA,QAAIR,OAAO,CAACyB,QAAR,KAAqBzB,OAAO,CAAC0B,SAAjC,EAA4C;AAC1C,aAAOlB,KAAK,CAAC,wBAAD,CAAZ;AACD;;AAED,UAAMmB,MAAM,GAAI,GAAEhC,OAAQ,gBAA1B;AAEAF,IAAAA,KAAK,CAACmC,IAAN,CAAWD,MAAX,EAAmB3B,OAAnB,EACCiB,IADD,CACOK,GAAG,IAAI;AACZH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,KAHD,EAICO,KAJD,CAIQC,GAAG,IAAI;AACb,UAAIA,GAAJ,EAAS;AACPX,QAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACD;AACF,KARD;AASD;AAzFc,CAAjB","sourcesContent":["const {default: axios} = require('axios');\nconst baseURL = 'http://localhost:4000';\n\nmodule.exports = {\n  loginReq: (form) => {\n\n    const reqBody = {};\n\n    for (const input of form) {\n      \n      const val = input.value;\n\n      if (val !== '') {\n        reqBody[input.name] = val\n      }\n    \n    }\n\n    //frontend validation needed:\n    // [] make sure all feilds are present,\n    if (Object.keys(reqBody).length !== 2) {\n      return alert('You forgot to fill something out')\n    } \n    // [] lengths of inputs (match schema)\n\n    const loginURL = `${baseURL}/user/login`; \n\n    fetch(loginURL, {\n        method: \"PUT\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(reqBody)\n    })\n    .then(rs => { \n      console.log(rs);\n      return rs.json()\n    })\n    .then(res => {\n      console.log(res)\n    })\n\n    // axios.put(loginURL, reqBody)\n    // .then( res => {\n    //   console.log(res);\n    // })\n    // .catch( err => {\n    //   if (err) {\n    //     console.log(err);\n    //   }\n    // })\n\n  },\n\n  regReq: (form) => {\n\n    const reqBody = {};\n\n    for (const input of form) {\n      \n      const val = input.value.trim();\n\n      if (val !== '') {\n        reqBody[input.name] = val\n      }\n    \n    }\n\n    //frontend validation needed:\n    // [*] make sure all feilds are present,\n    if (Object.keys(reqBody).length !== 4) {\n      return alert('You forgot to fill something out')\n    } \n    // [] lengths of inputs (match schema)\n    //all validation from before, \n    // [*] plus make sure both password inputs match\n    if (reqBody.password !== reqBody.password2) {\n      return alert('Passwords do not match')\n    }\n\n    const regURL = `${baseURL}/user/register`; \n\n    axios.post(regURL, reqBody)\n    .then( res => {\n      console.log(res);\n    })\n    .catch( err => {\n      if (err) {\n        console.log(err); \n      }\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}